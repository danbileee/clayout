{
  "web-import-dialog": {
    "prefix": "web-import-dialog",
    "body": ["import * as Dialog from \"@/components/ui/dialog\";"],
    "description": "web-import-dialog"
  },
  "web-import-tab": {
    "prefix": "web-import-tab",
    "body": ["import * as Tab from \"@/components/ui/tabs\";"],
    "description": "web-import-tab"
  },
  "web-import-typo": {
    "prefix": "web-import-typo",
    "body": ["import * as Typo from \"@/components/ui/typography\";"],
    "description": "web-import-typo"
  },
  "web-import-tooltip": {
    "prefix": "web-import-tooltip",
    "body": ["import * as Tooltip from \"@/components/ui/tooltip\";"],
    "description": "web-import-tooltip"
  },
  "web-import-select": {
    "prefix": "web-import-select",
    "body": ["import * as Select from \"@/components/ui/select\";"],
    "description": "web-import-select"
  },
  "web-should-forward-prop": {
    "prefix": "web-should-forward-prop",
    "body": [
      "shouldForwardProp: (prop) => {",
      "  const nonForwardedProps = [\"\"];",
      "",
      "  return !nonForwardedProps.includes(prop);",
      "},"
    ],
    "description": "web-should-forward-prop"
  },
  "web-try-catch-in-mutation": {
    "prefix": "web-try-catch-in-mutation",
    "body": [
      "const fn = async () => {",
      "};",
      "",
      "try {",
      "  await fn();",
      "} catch (e) {",
      "  const { error } = await handleError(e, {",
      "    onRetry: fn,",
      "  });",
      "",
      "  if (error) {",
      "    throw error;",
      "  }",
      "}"
    ],
    "description": "web-try-catch-in-mutation"
  },
  "web-try-catch-in-query": {
    "prefix": "web-try-catch-in-query",
    "body": [
      "const fn = async () => await get_({ params: { id } });",
      "const redirect = async () => navigate(joinPath([Paths.login]));",
      "",
      "try {",
      "  return await fn();",
      "} catch (e) {",
      "  const { error, data } = await handleError(e, {",
      "    onRetry: fn,",
      "    onRedirect: redirect,",
      "  });",
      "",
      "  if (error) {",
      "    throw error;",
      "  }",
      "",
      "  return data;",
      "}"
    ],
    "description": "web-try-catch-in-query"
  },
  "web-client-loader-auth": {
    "prefix": "web-client-loader-auth",
    "body": [
      "export async function clientLoader() {",
      "  const { meta, error } = await isAuthenticated();",
      "",
      "  if (error) {",
      "    throw error;",
      "  }",
      "",
      "  return {",
      "    meta,",
      "  }",
      "}",
      "",
      "export function HydrateFallback() {",
      "  return <Loading />;",
      "}",
      ""
    ],
    "description": "web-client-loader-auth"
  },
  "web-use-auth-meta": {
    "prefix": "web-use-auth-meta",
    "body": [
      "const { meta } = useLoaderData<typeof clientLoader>();",
      "useAuthMeta(meta);"
    ],
    "description": "web-use-auth-meta"
  }
}
